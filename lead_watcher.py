# lead_watcher.py ‚Äî —Ñ–∏–ª—å—Ç—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ + –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ + –æ—Ç—Å–µ–≤ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π + –ò–ò (–æ–ø—Ü.)
import os, json, re
from datetime import datetime
from telethon import events
from telethon.sync import TelegramClient
from telethon.sessions import StringSession

# ====== –ö–û–ù–§–ò–ì ======
# 1) –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∏—Ç–∞–µ–º –∏–∑ ENV (Render/–ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ $env:...).
API_ID  = int(os.getenv("TELEGRAM_API_ID", "0"))
API_HASH = os.getenv("TELEGRAM_API_HASH", "")
STRING   = os.getenv("TELEGRAM_STRING_SESSION", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

# 2) –ï—Å–ª–∏ ENV –ø—É—Å—Ç—ã –∏ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ó–î–ï–°–¨ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
# API_ID = 1234567
# API_HASH = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
# STRING = "1AAABBB....–æ—á–µ–Ω—å_–¥–ª–∏–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞..."
# OPENAI_API_KEY = "sk-..."

DEST_CHAT = os.getenv("DEST_CHAT", "–õ–∏–¥—ã")   # "–õ–∏–¥—ã", "@username", "-100–∏–¥", –ª–∏–±–æ "me"
TARGET_CHATS = [x.strip() for x in os.getenv("TARGET_CHATS", "").split(",") if x.strip()]
THRESHOLD = float(os.getenv("THRESHOLD", "0.75"))
MODEL = os.getenv("MODEL", "gpt-4o-mini")

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: —á–∏—Ç–∞–µ–º –∏–∑ ENV; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–µ—Ñ–æ–ª—Ç
KEYWORDS = [k.strip().lower() for k in os.getenv(
    "KEYWORDS",
    "–Ω—É–∂–µ–Ω, –Ω—É–∂–Ω–∞, –Ω—É–∂–Ω–æ, –∏—â–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∫—Ç–æ —Å–¥–µ–ª–∞–µ—Ç, —Å–¥–µ–ª–∞–π—Ç–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, api, "
    "—Å–∫–ª–∞–¥, —Å–∫–ª–∞–¥—Å–∫–æ–π —É—á–µ—Ç, —É—á–µ—Ç —Ç–æ–≤–∞—Ä–∞, —É—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤, crm, –±–∏—Ç—Ä–∏–∫—Å, bitrix, amocrm, retailcrm, "
    "—É—á–µ—Ç, —Ñ–∏–Ω—É—á–µ—Ç, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç, —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π —É—á–µ—Ç, —É–ø—Ä —É—á–µ—Ç, –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç, —ç–¥–æ, –æ—Ç—á–µ—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, "
    "–¥–∞—à–±–æ—Ä–¥, power bi, google —Ç–∞–±–ª–∏—Ü—ã, —Å–∫—Ä–∏–ø—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –ø–∞—Ä—Å–µ—Ä, –ø–∞—Ä—Å–∏–Ω–≥, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω, –ø–ª–∞—Ç–µ–∂–∏, –æ–ø–ª–∞—Ç—ã, "
    "shopify, woocommerce, tilda, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, ozon, –≤–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑, erp, odoo, zoho, –º–∏–≥—Ä–∞—Ü–∏—è, –æ–±–º–µ–Ω —Å —Å–∞–π—Ç–æ–º"
).split(",")]

# –ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞ ‚Äî –æ—Ç—Å–µ–∫–∞–µ–º —Ä–µ–∑—é–º–µ/–ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã
NEGATIVE_WORDS = [
    "–∏—â—É —Ä–∞–±–æ—Ç—É", "–∏—â—É –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É", "–≥–æ—Ç–æ–≤ —Å—Ç–∞–∂–∏—Ä–æ–≤–∞—Ç—å—Å—è", "—Å—Ç–∞–∂–µ—Ä", "—Å—Ç–∞–∂—ë—Ä",
    "junior", "–¥–∂—É–Ω", "–º–æ—ë —Ä–µ–∑—é–º–µ", "–º–æ–µ —Ä–µ–∑—é–º–µ", "—Ä–µ–∑—é–º–µ", "cv", "–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
    "–º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–æ–∫–ª–∞–¥", "—Ö–æ—á—É –∑–∞—Ä–ø–ª–∞—Ç—É",
    "full time", "–ø–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å", "–≤–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "–∏—â—É —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"
]

# ====== OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ======
try:
    from openai import OpenAI
    oai = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception:
    oai = None

# ====== –£–¢–ò–õ–ò–¢–´ ======
def _matches_keywords(text: str) -> bool:
    t = (text or "").lower()
    return any(kw in t for kw in KEYWORDS)

async def _score_with_ai(text: str) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {score:0..1, category, reason}.
    –ï—Å–ª–∏ OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º score=1.0 –∏ –ø–æ–º–µ—Ç–∫—É.
    """
    if not oai:
        return {"score": 1.0, "category": "–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", "reason": "AI –≤—ã–∫–ª—é—á–µ–Ω (–Ω–µ—Ç OPENAI_API_KEY)"}
    system = (
        "–¢—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∏–¥–æ–≤. –û—Ü–µ–Ω–∏, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è/–ø–æ–¥—Ä—è–¥—á–∏–∫–∞ "
        "–≤ —Å—Ñ–µ—Ä–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏/—É—á—ë—Ç/—Å–∫–ª–∞–¥/CRM/–±–æ—Ç—ã. –í–µ—Ä–Ω–∏ JSON: "
        "{score:0..1, category, reason (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)}. –ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞/–Ω–∞–Ω–∏–º–∞—Ç–µ–ª—è ‚Äî –±–ª–∏–∂–µ –∫ 1, —Ñ–ª—É–¥ ‚Äî –±–ª–∏–∂–µ –∫ 0."
    )
    user = f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}"
    resp = oai.chat.completions.create(
        model=MODEL,
        messages=[{"role": "system", "content": system},
                  {"role": "user",   "content": user}],
        temperature=0.1,
    )
    content = resp.choices[0].message.content.strip()
    try:
        start, end = content.find("{"), content.rfind("}")
        data = json.loads(content[start:end+1])
    except Exception:
        data = {"score": 0.0, "category": "unknown", "reason": "parse_error", "raw": content}
    try:
        data["score"] = max(0.0, min(1.0, float(data.get("score", 0))))
    except Exception:
        data["score"] = 0.0
    return data

# ====== –§–∏–ª—å—Ç—Ä —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π/—Ä–µ–∫–ª–∞–º—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ======
PROVIDER_WORDS = [
    "–ø—Ä–µ–¥–ª–∞–≥–∞—é", "–æ–∫–∞–∂—É", "—É—Å–ª—É–≥–∏", "—Å–¥–µ–ª–∞—é", "–Ω–∞—Å—Ç—Ä–æ—é", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—é", "–ø–æ–º–æ–≥—É",
    "–±–µ—Ä—É—Å—å", "–≤—ã–ø–æ–ª–Ω—é", "–≤–æ–∑—å–º—É—Å—å", "–º–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", "–º–æ–π –æ–ø—ã—Ç", "—Å—Ç–µ–∫", "–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
    "—Ç–µ—Ö—Å–ø–µ—Ü", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å", "–ø–∏—à–∏—Ç–µ –≤ –ª—Å", "–≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å",
    "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ –∫–ª—é—á", "–ø–æ–¥ –∫–ª—é—á", "–≤–µ–¥—É –ø—Ä–æ–µ–∫—Ç—ã", "–∑–∞–Ω–∏–º–∞—é—Å—å", "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é"
]
FIRST_PERSON_HINTS = ["—è ", "–º—ã "]
CONTACT_RE = re.compile(r'(\+?\d[\d\s\-\(\)]{9,}|@[\w\d_]{3,}|https?://|t\.me/|wa\.me/|vk\.me/|telegram\.me/)', re.I)
HASHTAG_RE = re.compile(r'(?:^|\s)#\w+', re.U)

def is_provider_pitch(text: str) -> bool:
    """–ì—Ä—É–±—ã–π –æ—Ç—Å–µ–≤: —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è, –ø—Ä–∞–π—Å—ã, –∫–∞—Ç–∞–ª–æ–≥–∏ —É—Å–ª—É–≥."""
    t = (text or "").lower()

    # –º–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–æ–≤/—Å—Å—ã–ª–æ–∫/–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    if len(HASHTAG_RE.findall(text)) >= 3:
        return True
    if len(re.findall(r'https?://|t\.me/', text, flags=re.I)) >= 2:
        return True
    if CONTACT_RE.search(text):
        if any(w in t for w in PROVIDER_WORDS):
            return True

    # ¬´—è/–º—ã + —Å–¥–µ–ª–∞—é/–Ω–∞—Å—Ç—Ä–æ—é/–æ–∫–∞–∂—É ‚Ä¶¬ª
    if any(w in t for w in PROVIDER_WORDS) and any(h in t for h in FIRST_PERSON_HINTS):
        return True

    # –º–∞—Ä–∫–¥–∞—É–Ω/—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ (–º–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–æ–≤-—ç–º–æ–¥–∑–∏/–¥–µ—Ñ–∏—Å–æ–≤)
    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    bullets = sum(1 for ln in lines if ln.startswith(("-", "‚Äî", "‚Ä¢", "üëâ", "‚úÖ", "üìå", "üîπ", "üî∏")))
    if bullets >= 6 and len(lines) >= 8:
        return True

    return False

# ====== Telegram ======
client = TelegramClient(StringSession(STRING), API_ID, API_HASH)

_dest_entity = None
async def _resolve_dest():
    """–†–∞–∑—Ä–µ—à–∞–µ–º DEST_CHAT –≤ entity (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 'me', @username, -100id, —Ç–æ—á–Ω–æ–µ –∏–º—è –¥–∏–∞–ª–æ–≥–∞)."""
    global _dest_entity
    if _dest_entity is not None:
        return _dest_entity
    if DEST_CHAT == "me":
        _dest_entity = "me"
        return _dest_entity
    try:
        _dest_entity = await client.get_entity(DEST_CHAT)  # @username –∏–ª–∏ -100id
        return _dest_entity
    except Exception:
        async for d in client.iter_dialogs():
            if d.name == DEST_CHAT:       # —Ç–æ—á–Ω–æ–µ –∏–º—è –¥–∏–∞–ª–æ–≥–∞
                _dest_entity = d.entity
                return _dest_entity
    raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å DEST_CHAT='{DEST_CHAT}'. –£–∫–∞–∂–∏ —Ç–æ—á–Ω–æ–µ –∏–º—è, @username –∏–ª–∏ -100ID.")

# ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ======
@client.on(events.NewMessage(chats=TARGET_CHATS or None))
async def handler(event):
    text = (event.message.message or "").strip()
    if not text:
        return

    # 1) –ê–≤—Ç–æ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤
    try:
        sender = await event.get_sender()
        uname = (getattr(sender, "username", "") or "").lower()
        if getattr(sender, "bot", False) or uname.endswith("bot"):
            return
    except Exception:
        pass

    # 2) –ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞ ‚Äî –æ—Ç—Ä–µ–∑–∞–µ–º —Ä–µ–∑—é–º–µ/–ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –¥–æ –ª—é–±—ã—Ö –∑–∞—Ç—Ä–∞—Ç
    low = text.lower()
    if any(w in low for w in NEGATIVE_WORDS):
        return

    # 3) –°–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏/—Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã ‚Äî –æ—Ç—Å–µ–∫–∞–µ–º
    if is_provider_pitch(text):
        return

    # 4) –ë—ã—Å—Ç—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if not _matches_keywords(text):
        return

    # 5) –ò–ò-–æ—Ü–µ–Ω–∫–∞
    data = await _score_with_ai(text)
    score = data.get("score", 0.0)
    if score < THRESHOLD:
        return

    category = data.get("category", "unknown")
    reason = data.get("reason", "")

    # –ü—Ä–æ—Å—Ç–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–±–µ–∑ —Å—Å—ã–ª–æ–∫/–∞–≤—Ç–æ—Ä–∞)
    source = getattr(getattr(event, "chat", None), "title", str(getattr(event, "chat_id", "unknown")))

    body = (
        f"üîî –õ–ò–î {int(score*100)}% ¬∑ {category}\n\n"
        f"{text}\n\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
        f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {reason}\n"
        f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    )

    dest = await _resolve_dest()
    await client.send_message(dest, body)

# ====== Main ======
def main():
    for k in ("TELEGRAM_API_ID","TELEGRAM_API_HASH","TELEGRAM_STRING_SESSION","OPENAI_API_KEY"):
        if not os.getenv(k):
            print(f"‚ö† –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {k} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    print("Lead watcher –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    with client:
        client.run_until_disconnected()

if __name__ == "__main__":
    main()

