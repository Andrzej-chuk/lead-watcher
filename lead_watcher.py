# lead_watcher.py ‚Äî —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
import os, json
from datetime import datetime
from telethon import events
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from openai import OpenAI

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
# –í–∞—Ä–∏–∞–Ω—Ç 1: –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
API_ID  = int(os.getenv("TELEGRAM_API_ID", "0"))
API_HASH = os.getenv("TELEGRAM_API_HASH", "")
STRING   = os.getenv("TELEGRAM_STRING_SESSION", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

# –í–∞—Ä–∏–∞–Ω—Ç 2: –µ—Å–ª–∏ ENV –ø—É—Å—Ç—ã ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è (–∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º)
if not API_ID or not API_HASH or not STRING:
    API_ID = API_ID or 0               # –ø—Ä–∏–º–µ—Ä: 26393382  (—á–∏—Å–ª–æ–º)
    API_HASH = API_HASH or ""          # –ø—Ä–∏–º–µ—Ä: "49344b12bblab04d882c1dc7737cfdfd"
    STRING = STRING or ""              # –ø—Ä–∏–º–µ—Ä: "1ApwazpM..."
if not OPENAI_API_KEY:
    OPENAI_API_KEY = ""                # –ø—Ä–∏–º–µ—Ä: "sk-..."

DEST_CHAT = os.getenv("DEST_CHAT", "–õ–∏–¥—ã")   # "me", —Ç–æ—á–Ω–æ–µ –∏–º—è, @username –∏–ª–∏ -100ID
TARGET_CHATS = [x.strip() for x in os.getenv("TARGET_CHATS", "").split(",") if x.strip()]
THRESHOLD = float(os.getenv("THRESHOLD", "0.75"))
MODEL = os.getenv("MODEL", "gpt-4o-mini")
KEYWORDS = [k.strip().lower() for k in os.getenv(
    "KEYWORDS",
    "1—Å, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, bitrix, crm, erp, —Å–∫–ª–∞–¥, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —É—á–µ—Ç, –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç, api, –±–æ—Ç, telegram"
).split(",")]

# ==== –ö–õ–ò–ï–ù–¢–´ ====
oai = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
client = TelegramClient(StringSession(STRING), API_ID, API_HASH)

# ==== –£–¢–ò–õ–ò–¢–´ ====
def _matches_keywords(text: str) -> bool:
    t = (text or "").lower()
    return any(kw in t for kw in KEYWORDS)

async def _score_with_ai(text: str) -> dict:
    """–í–µ—Ä–Ω—É—Ç—å {score:0..1, category, reason}. –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –∏–º–∏—Ç–∏—Ä—É–µ–º 1.0."""
    if not oai:
        return {"score": 1.0, "category": "–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", "reason": "AI –≤—ã–∫–ª—é—á–µ–Ω (–Ω–µ—Ç OPENAI_API_KEY)"}
    system = (
        "–¢—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∏–¥–æ–≤. –û—Ü–µ–Ω–∏, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è/–ø–æ–¥—Ä—è–¥—á–∏–∫–∞ "
        "–≤ —Å—Ñ–µ—Ä–∞—Ö –ò–¢/–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è/1–°/CRM/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏. –í–µ—Ä–Ω–∏ JSON: "
        "{score:0..1, category, reason (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)}. "
        "–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞/–Ω–∞–Ω–∏–º–∞—Ç–µ–ª—è ‚Äî –±–ª–∏–∂–µ –∫ 1, —Ñ–ª—É–¥ ‚Äî –±–ª–∏–∂–µ –∫ 0."
    )
    user = f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}"
    resp = oai.chat.completions.create(
        model=MODEL,
        messages=[{"role":"system","content":system},{"role":"user","content":user}],
        temperature=0.1,
    )
    content = resp.choices[0].message.content.strip()
    try:
        start, end = content.find("{"), content.rfind("}")
        data = json.loads(content[start:end+1])
    except Exception:
        data = {"score":0.0, "category":"unknown", "reason":"parse_error", "raw":content}
    try:
        data["score"] = max(0.0, min(1.0, float(data.get("score", 0))))
    except:
        data["score"] = 0.0
    return data

# --- resolver –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∫–∞–Ω–∞–ª "–õ–∏–¥—ã"/me/@username/-100ID) ---
_dest_entity = None
async def _resolve_dest():
    global _dest_entity
    if _dest_entity is not None:
        return _dest_entity
    if DEST_CHAT == "me":
        _dest_entity = "me"
        return _dest_entity
    try:
        _dest_entity = await client.get_entity(DEST_CHAT)   # –í–ê–ñ–ù–û: await
        return _dest_entity
    except Exception:
        async for d in client.iter_dialogs():
            if d.name == DEST_CHAT:
                _dest_entity = d.entity
                return _dest_entity
    raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å DEST_CHAT='{DEST_CHAT}'. –£–∫–∞–∂–∏ —Ç–æ—á–Ω–æ–µ –∏–º—è, @username –∏–ª–∏ -100ID.")

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö ====
@client.on(events.NewMessage(chats=TARGET_CHATS or None))
async def handler(event):
    text = (event.message.message or "").strip()
    if not text or not _matches_keywords(text):
        return

    data = await _score_with_ai(text)
    score = data.get("score", 0.0)
    if score < THRESHOLD:
        return

    category = data.get("category", "unknown")
    reason = data.get("reason", "")

    # —á–∏—Ç–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ + –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ + –∞–≤—Ç–æ—Ä
    chat_ent = await client.get_entity(event.chat_id)
    title = getattr(chat_ent, "title", None) or getattr(chat_ent, "first_name", "") or "unknown"
    uname = getattr(chat_ent, "username", None)

    cid = getattr(event, "chat_id", None)
    msg_id = event.message.id
    if uname:
        msg_link = f"https://t.me/{uname}/{msg_id}"
    else:
        cid_str = str(cid)
        msg_link = f"https://t.me/c/{cid_str[4:]}/{msg_id}" if cid_str.startswith("-100") else "(no link)"

    source_line = f"{title}" + (f" (@{uname})" if uname else "") + f" | id: {cid}"

    sender = await event.get_sender()
    author_name = (" ".join(filter(None, [getattr(sender, 'first_name', None), getattr(sender, 'last_name', None)])) or "unknown").strip()
    author_username = getattr(sender, "username", None)
    author_line = author_name + (f" (@{author_username})" if author_username else "")

    body = (
        f"üîî –õ–ò–î {int(score*100)}% ¬∑ {category}\n\n"
        f"{text}\n\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source_line}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg_link}\n"
        f"–ê–≤—Ç–æ—Ä: {author_line}\n"
        f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {reason}\n"
        f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    )

    dest = await _resolve_dest()
    await client.send_message(dest, body)

# ==== MAIN ====
def main():
    for k in ("TELEGRAM_API_ID","TELEGRAM_API_HASH","TELEGRAM_STRING_SESSION","OPENAI_API_KEY"):
        if not os.getenv(k):
            print(f"‚ö† –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {k} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    print("Lead watcher –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    with client:
        client.run_until_disconnected()

if __name__ == "__main__":
    main()
